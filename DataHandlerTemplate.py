# -*- coding: utf-8 -*-
"""
Created on Mon May  4 20:10:22 2020
@author: rhann, thelgestad
Last Modified on ___
"""
import pandas as pd
import re
import json
import requests
import sys
from pprint import pprint
from flatten_json import flatten
from token_handler import TokenHandler as th

class DataHandler:
    
    def getData(self):

        #call TokenHandler() and get access token
        def RequestToken():
    
            token = th.getToken(self)
            
            if token[1] != 200:
                sys.exit("Token retrieval error: " + token[2])
            else:
                return(token[0])

        def GetMeasurementandConfig(token): 
            
            print(token)
            with open('QAQC_Pipeline/sample_JSON_payload/simple_payload.json') as f:
                payload = json.load(f)
            
            # try:
            #     payload = requests.get('http://ab617-web-dev:8082/api/qa/getqascript', headers = {'Authorization': 'Bearer '+ token, 'Content-Type': 'multipart/form-data; boundary=--------------------------651623359726858260475474'})
            #     return(payload)

            # except requests.exceptions.RequestException as e:  
            #     raise SystemExit(e)

            return(payload)

        # inner function to extract measurement and configuration data and convert to dataframe objects (# 18 on QC Pipeline sequence diagram)        
        def ConvertJSONtoDataframe(payload):
    
            jMeasurementData   = payload['measurements']
            jConfigurationData = payload['configuration']
    
            # need to flatten nested JSON configuration data
            jConfigurationData = json.dumps([flatten(j) for j in jConfigurationData])
        
            # prune QAConfig prefix from nested keys and convert object to dataframe
            jPruned = re.sub(r'QaConfigurationSettings_[\d]+_', '', jConfigurationData)
            configurationFrame = pd.DataFrame(json.loads(jPruned))
    
            # convert measurement data object to dataframe
            measurementFrame = pd.DataFrame(jMeasurementData)

            return measurementFrame, configurationFrame
                                                                                    
        token = RequestToken()
        payload = GetMeasurementandConfig(token)
        dfs = ConvertJSONtoDataframe(payload)
        return(dfs)

    #def Processdata(dfs):
        #call QC core

    #def putData(dfs) 
        #convert dataframes to JSON
        #put JSON into db
        
#######################################################################################################################################################
        
if __name__ == "__main__":
    
    dh = DataHandler()
    dfs = dh.getData()
    #dh.ProcessData(dfs)
    #dh.putData()
    #print(dfs[0])
    #print(dfs[1])

""" 

        def putQCFlagData(self, QFrame):    # method to POST computed QC flags to  the data API (# 25 on QC Pipeline diagram)
        
        QCFlagData = self.QFrame        # QFrame is the dataframe generated by the QC_Core module that contains the computed QC Flags for each record
    
        
    def putHourlyAverageData(self, averagesData):    # method to POST computed hourly averages to data API (not on sequence diagram but will occur after # 26)
        
        AveragesDataframe = self.averagesData            # averagesData is the dataframe generated by the QC_Core module that contains the aggregated subhourly data """